{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Procedural Shader Documentation","text":"<p>Welcome to the Shader Snippets Documentation! This site collects procedural shaders that create visual effects, like patterns or colors, on a full-screen rectangle (called a quad). Our shaders are written in GLSL (used in Shadertoy and WebGL) and HLSL (used in Unreal Engine and Unity).</p>"},{"location":"#whats-this-about","title":"What\u2019s This About?","text":"<p>Our goal is to make it easy to understand and reuse shaders that draw cool visuals without 3D objects in the scene. For example: - A shader might fill the screen with a gradient or checkerboard pattern. - In Unreal Engine, we use Post Process Materials to apply these shaders to the entire screen. - In Shadertoy, shaders automatically draw on a full-screen quad.</p>"},{"location":"#whats-next","title":"What\u2019s Next?","text":"<ul> <li>Browse shaders in the Shaders section, organized by type (e.g., patterns, effects).</li> <li>Learn how to set up shaders in Unreal Engine or other platforms.</li> <li>Watch video demos to see shaders in action.</li> </ul>"},{"location":"#tags","title":"Tags","text":"<ul> <li>shaders, glsl, hlsl, shadertoy, unreal-engine, procedural</li> </ul>"},{"location":"demoShader/","title":"Demo Shader: Procedural","text":""},{"location":"demoShader/#glsl-shadertoy","title":"GLSL (Shadertoy)","text":""},{"location":"demoShader/#glsl-code-with-title","title":"GLSL Code  // with title","text":"<p>Some <code>glsl</code> code goes here pixelShader.glsl<pre><code>shader_type canvas_item;\n\nvoid vertex() {\n    // Called for every vertex the material is visible on.\n}\n\nvoid fragment() {\n    // Called for every pixel the material is visible on.\n    // Create a wavy pattern based on UV coordinates and time\n    float value = sin(UV.x * 50.0 + TIME) * cos(UV.y * 50.0 + TIME);\n    // Normalize the value to 0.0\u20131.0 for grayscale\n    value = (value + 1.0) * 0.6;\n    // Output as grayscale with full opacity\n    COLOR = vec4(value, value, value, 1.0);\n} \n</code></pre></p>"},{"location":"demoShader/#godot-icon-shader","title":"GODOT icon shader","text":"icon.gdshader<pre><code>shader_type canvas_item;\nvoid fragment() {\n    // Called for every pixel the material is visible on.\n    //COLOR = vec4(1,1,1,1);;\n    vec4 input_color = texture(TEXTURE, UV);\n\n    if (UV.x &gt; 0.5) {\n        COLOR = vec4(0,0, 0, input_color.r);\n    }\n    else {\n        COLOR = vec4(1.0, 1.0, 1.0, input_color.g);\n    }\n}\n</code></pre>"},{"location":"demoShader/#pytorch","title":"Pytorch","text":"<p>Some <code>python</code> code goes here  // highlighting according to  specific language <pre><code>import numpy as np\ndef sum():\n    print('shader development doc')\n</code></pre></p>"},{"location":"demoShader/#json-code-with-line-number-and-higlighting-specific-line-number-code","title":"JSON Code   // with line number and higlighting specific line number code","text":"<p>Some <code>json</code> code entitled here... <pre><code>{\n\"name\":\"John\",\n\"age\":30,\n\"cars\":[\"Ford\", \"BMW\", \"Fiat\"]\n}\nmyObj.cars[0];\n</code></pre></p>"},{"location":"demoShader/#shader-video-demo","title":"Shader Video Demo","text":"<p>Shader in action, made by <code>Utku</code> </p>      Your browser does not support the video tag.  <p>Shows different shaders running in Unreal Engine.</p>"},{"location":"demoShader/#video-demo-embedding-external-video-link-like-from-youtube","title":"Video Demo ... Embedding external video link like from youtube","text":"<p>Getting Started with Compute Shaders in Unity.</p>"}]}