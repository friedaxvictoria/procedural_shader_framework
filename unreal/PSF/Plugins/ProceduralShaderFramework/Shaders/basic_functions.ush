#ifndef PROCEDURAL_SHADER_FRAMEWORK_BASICS_H
#define PROCEDURAL_SHADER_FRAMEWORK_BASICS_H

void computeUV(float2 fragCoord, float2 ScreenParams, out float2 uv)
{
    uv = (fragCoord.xy * 2.0 - 1.0) / float2(ScreenParams.y / ScreenParams.x, 1.);
}

// after lighting function
void combinedColour(float4 hitPos1, float4 hitPos2, float3 colour1, float3 colour2, out float3 colour)
{
    if (hitPos1.w > _raymarchStoppingCriterium && hitPos2.w > _raymarchStoppingCriterium)
    {
        colour = float3(0, 0, 0);
    }
    else if (hitPos1.w < hitPos2.w)
    {
        colour = colour1;
    }
    else
    {
        colour = colour2;
    }
}


// before lighting function
void getMinimum(float4 hitPos1, float4 hitPos2, float3 normal1, float3 normal2, float hitIndex1, float hitIndex2, out float4 hitPos, out float3 normal, out float hitIndex)
{
    if (hitPos1.w < hitPos2.w && hitPos1.w < _raymarchStoppingCriterium)
    {
        hitPos = hitPos1;
        normal = normal1;
        hitIndex = hitIndex1;
    }
    else
    {
        hitPos = hitPos2;
        normal = normal2;
        hitIndex = hitIndex2;
    }
}

#endif