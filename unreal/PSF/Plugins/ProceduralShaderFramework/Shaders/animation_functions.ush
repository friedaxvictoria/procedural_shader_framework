#ifndef PROCEDURAL_SHADER_FRAMEWORK_ANIMATIONS_H
#define PROCEDURAL_SHADER_FRAMEWORK_ANIMATIONS_H

#include "global_variables.ush"
#include "helper_functions.ush"
#include "noise_functions.ush"

void changingColorSin(float3 seedColor, float speed, float time, out float3 color)
{
    float3 rootColor = asin(2 * seedColor - 1);
    color = 0.5 + 0.5 * sin(time * speed * rootColor);
}

void translateObject(float time, float3 seedPosition, float3 dir, float speed, out float3 position)
{
    position = seedPosition + dir * sin(time * speed);
}

void orbitObjectAroundPoint(float3 seedPosition, float3 center, float3 axis, float radius, float speed, float angleOffset, float time, out float3 position, out float angle)
{
    axis = normalize(axis);
    angle = time * speed + angleOffset * PI / 180;
        
    float3 radiusAxis = (float3(1, 1, 1) - axis) * radius;
    
    float3 p = seedPosition + radiusAxis - center;
    position = center + cos(angle) * p + sin(angle) * cross(axis, p) + (1 - cos(angle)) * dot(axis, p) * axis;
    
    angle = angle * 180 / PI;
}


void shakeObject(float3 seedPosition, float intensity, float speed, float time, out float3 position)
{
    float t = time * speed;

    float x = hash11(t + 1.1) - 0.5;
    float y = hash11(t + 2.3) - 0.5;
    float z = hash11(t + 3.7) - 0.5;

    float3 jitter = float3(x, y, z) * intensity;

    position = seedPosition + jitter;
}

void cycleColor(float3 seedColor, float speed, float time, out float3 color)
{
    float t = time * speed;
    float hue = frac(t);
    float3 hsv = float3(hue, 1.0, 1.0);
    float3 rgb = saturate(abs(frac(hsv.x + float3(0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 1.0);
    
    color = rgb * seedColor;
}

float3 animateUpDown(float3 pos, float time, float amplitude = 0.5, float frequency = 2.0)
{
    pos.y += sin(time * frequency) * amplitude;
    return pos;
}

float3 animateCircularXZ(float3 pos, float time, float radius = 0.5, float speed = 1.0)
{
    float angle = time * speed;
    pos.x += sin(angle) * radius;
    pos.z += cos(angle) * radius;
    return pos;
}

float3 animateSwayX(float3 pos, float time, float amplitude = 0.3, float frequency = 1.5)
{
    pos.x += sin(time * frequency) * amplitude;
    return pos;
}

#endif