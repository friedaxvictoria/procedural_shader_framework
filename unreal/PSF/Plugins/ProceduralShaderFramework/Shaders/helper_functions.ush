#ifndef PROCEDURAL_SHADER_FRAMEWORK_HELPERS_H
#define PROCEDURAL_SHADER_FRAMEWORK_HELPERS_H

#include "global_variables.ush"
#include "noise_functions.ush"

//SPECIAL HELPERS FOR DOLPHIN
float distanceToBox(float3 p, float3 halfExtent, float radius)
{
    float3 distanceToBox = abs(p) - halfExtent;
    return length(max(distanceToBox, 0.0)) - radius;
}

float smoothUnion(float distance1, float distance2, float smoothFactor)
{
    float h = clamp(0.5 + 0.5 * (distance2 - distance1) / smoothFactor, 0.0, 1.0);
    return lerp(distance2, distance1, h) - smoothFactor * h * (1.0 - h);
}

float2 dolphinAnimation(float position, float timeOffset, float time)
{
    float adjustedTime = time + timeOffset;
    float angle1 = 0.9 * (0.5 + 0.2 * position) * cos(5.0 * position - 3.0 * adjustedTime + 6.2831 / 4.0);
    float angle2 = 1.0 * cos(3.5 * position - 1.0 * adjustedTime + 6.2831 / 4.0);
    float jumping = 0.5 + 0.5 * cos(-0.4 + 0.5 * adjustedTime);
    float finalAngle = lerp(angle1, angle2, jumping);
    float thickness = 0.4 * cos(4.0 * position - 1.0 * adjustedTime) * (1.0 - 0.5 * jumping);
    return float2(finalAngle, thickness);
}

float3 dolphinMovement(float timeOffset, float3 basePosition, float speed, float time)
{
    if (speed == 0)
        return basePosition;
    float adjustedTime = time + timeOffset;
    float jumping = 0.5 + 0.5 * cos(-0.4 + 0.5 * adjustedTime);
    
    float3 movement1 = float3(0.0, sin(3.0 * adjustedTime + 6.2831 / 4.0), 0.0);
    float3 movement2 = float3(0.0, 1.5 + 2.5 * cos(1.0 * adjustedTime), 0.0);
    float3 finalMovement = lerp(movement1, movement2, jumping);
    finalMovement.y *= 0.5;
    finalMovement.x += 0.1 * sin(0.1 - 1.0 * adjustedTime) * (1.0 - jumping);
    
    float3 worldOffset = float3(0.0, 0.0, fmod(-speed * time, 20.0) - 5.0);
    
    return basePosition + finalMovement + worldOffset;
}


//returning: res.x: The signed distance from point p to the dolphin. res.y: A parameter h that stores a normalized position along the dolphin's body (used for further shaping/decorating).
float2 dolphinDistance(float3 p, float3 position, float timeOffset, float speed, float time)
{

	//initialize the result to a very large distance and an auxiliary value of 0. We'll minimize this value over the dolphin's body parts.
    float2 result = float2(1000.0, 0.0);
    float3 startPoint = dolphinMovement(timeOffset, position, speed, time);

    float segmentNumberFloat = 11.0;
    int segmentNumber = int(segmentNumberFloat);

    float3 position1 = startPoint;
    float3 position2 = startPoint;
    float3 position3 = startPoint;
    float3 direction1 = float3(0.0, 0.0, 0.0);
    float3 direction2 = float3(0.0, 0.0, 0.0);
    float3 direction3 = float3(0.0, 0.0, 0.0);
    float3 closestPoint = startPoint;

    for (int i = 0; i < segmentNumber; i++)
    {
        float segmentPosition = float(i) / segmentNumberFloat;
        float2 segmentAnimation = speed == 0 ? float2(0, 0) : dolphinAnimation(segmentPosition, timeOffset, time);
        float segmentLength = 0.48;
        if (i == 0)
            segmentLength = 0.655;
        float3 endPoint = startPoint + segmentLength * normalize(float3(sin(segmentAnimation.y), sin(segmentAnimation.x), cos(segmentAnimation.x)));

        float3 startToPoint = p - startPoint;
        float3 startToEnd = endPoint - startPoint;
        float projection = clamp(dot(startToPoint, startToEnd) / dot(startToEnd, startToEnd), 0.0, 1.0);
        float3 vectorToClosestPoint = startToPoint - projection * startToEnd;

        float2 distance = float2(dot(vectorToClosestPoint, vectorToClosestPoint), projection);

        if (distance.x < result.x)
        {
            result = float2(distance.x, segmentPosition + distance.y / segmentNumberFloat);
            closestPoint = startPoint + distance.y * (endPoint - startPoint);

        }
		//store Specific Segment Info for Fins and Tail
        if (i == 3)
        {
            position1 = startPoint;
            direction1 = endPoint - startPoint;
        }
        if (i == 4)
        {
            position3 = startPoint;
            direction3 = endPoint - startPoint;
        }
        if (i == (segmentNumber - 1))
        {
            position2 = endPoint;
            direction2 = endPoint - startPoint;
        }
		//move Forward to Next Segment
        startPoint = endPoint;
    }
    float bodyRadius = result.y;
    float radius = 0.05 + bodyRadius * (1.0 - bodyRadius) * (1.0 - bodyRadius) * 2.7;
    radius += 7.0 * max(0.0, bodyRadius - 0.04) * exp(-30.0 * max(0.0, bodyRadius - 0.04)) * smoothstep(-0.1, 0.1, p.y - closestPoint.y);
    radius -= 0.03 * (smoothstep(0.0, 0.1, abs(p.y - closestPoint.y))) * (1.0 - smoothstep(0.0, 0.1, bodyRadius));
    radius += 0.05 * clamp(1.0 - 3.0 * bodyRadius, 0.0, 1.0);
    radius += 0.035 * (1.0 - smoothstep(0.0, 0.025, abs(bodyRadius - 0.1))) * (1.0 - smoothstep(0.0, 0.1, abs(p.y - closestPoint.y)));
    result.x = 0.75 * (distance(p, closestPoint) - radius);

	//fin part
    direction3 = normalize(direction3);
    float k = sqrt(1.0 - direction3.y * direction3.y);
    float3x3 ms = float3x3(
			direction3.z / k, -direction3.x * direction3.y / k, direction3.x,
			0.0, k, direction3.y,
			-direction3.x / k, -direction3.y * direction3.z / k, direction3.z);
    float3 ps = mul((p - position3), ms);
    ps.z -= 0.1; // This is the offset for the fin

    float distance5 = length(ps.yz) - 0.9;
    distance5 = max(distance5, -(length(ps.yz - float2(0.6, 0.0)) - 0.35));
    distance5 = max(distance5, distanceToBox(ps + float3(0.0, -0.5, 0.5), float3(0.0, 0.5, 0.5), 0.02));
    result.x = smoothUnion(result.x, distance5, 0.1);

	//fin 
    direction1 = normalize(direction1);
    k = sqrt(1.0 - direction1.y * direction1.y);
    ms = float3x3(
			direction1.z / k, -direction1.x * direction1.y / k, direction1.x,
			0.0, k, direction1.y,
			-direction1.x / k, -direction1.y * direction1.z / k, direction1.z);

    ps = p - position1;
    ps = mul(ps, ms);
    ps.x = abs(ps.x);
    float l = ps.x;
    l = clamp((l - 0.4) / 0.5, 0.0, 1.0);
    l = 4.0 * l * (1.0 - l);
    l *= 1.0 - clamp(5.0 * abs(ps.z + 0.2), 0.0, 1.0);
    ps.xyz += float3(-0.2, 0.36, -0.2);
    distance5 = length(ps.xz) - 0.8;
    distance5 = max(distance5, -(length(ps.xz - float2(0.2, 0.4)) - 0.8));
    distance5 = max(distance5, distanceToBox(ps + float3(0.0, 0.0, 0.0), float3(1.0, 0.0, 1.0), 0.015 + 0.05 * l));
    result.x = smoothUnion(result.x, distance5, 0.12);

	//tail part
    direction2 = normalize(direction2);
    float2x2 mf = float2x2(
			direction2.z, direction2.y,
			-direction2.y, direction2.z);
    float3 pf = p - position2 - direction2 * 0.25;
    pf.yz = mul(pf.yz, mf);
    float distance4 = length(pf.xz) - 0.6;
    distance4 = max(distance4, -(length(pf.xz - float2(0.0, 0.8)) - 0.9));
    distance4 = max(distance4, distanceToBox(pf, float3(1.0, 0.005, 1.0), 0.005));
    result.x = smoothUnion(result.x, distance4, 0.1);

    return result;
}

// new function for rock sdf
// Signed distance to an axis-aligned box centered at origin
float sdBox(float3 p, float3 b)
{
    // p: point in local space
    // b: half-size in x/y/z directions
    float3 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);
}

float sdSphere(float3 position, float radius)
{
    return length(position) - radius;
}

float sdRoundBox(float3 p, float3 b, float r)
{
    float3 q = abs(p) - b + r;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

float sdTorus(float3 p, float2 radius)
{
    float2 q = float2(length(p.xy) - radius.x, p.z);
    return length(q) - radius.y;
}

float sdHexPrism(float3 p, float2 height)
{
    const float3 k = float3(-0.8660254, 0.5, 0.57735);
    p = abs(p);
    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.0) * k.xy;
    float2 d = float2(
       length(p.xy - float2(clamp(p.x, -k.z * height.x, k.z * height.x), height.x)) * sign(p.y - height.x),
       p.z - height.y);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float sdOctahedron(float3 p, float s)
{
    p = abs(p);
    return (p.x + p.y + p.z - s) * 0.57735027;
}

float sdEllipsoid(float3 p, float3 r)
{
    float k0 = length(p / r);
    float k1 = length(p / (r * r));
    return k0 * (k0 - 1.0) / k1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////

float2 GetGradient(float2 intPos, float t)
{
    float rand = frac(sin(dot(intPos, float2(12.9898, 78.233))) * 43758.5453);
    float angle = 6.283185 * rand + 4.0 * t * rand;
    return float2(cos(angle), sin(angle));
}

float Pseudo3dNoise(float3 pos)
{
    float2 i = floor(pos.xy);
    float2 f = frac(pos.xy);
    float2 blend = f * f * (3.0 - 2.0 * f);

    float a = dot(GetGradient(i + float2(0, 0), pos.z), f - float2(0.0, 0.0));
    float b = dot(GetGradient(i + float2(1, 0), pos.z), f - float2(1.0, 0.0));
    float c = dot(GetGradient(i + float2(0, 1), pos.z), f - float2(0.0, 1.0));
    float d = dot(GetGradient(i + float2(1, 1), pos.z), f - float2(1.0, 1.0));

    float xMix = lerp(a, b, blend.x);
    float yMix = lerp(c, d, blend.x);
    return lerp(xMix, yMix, blend.y) / 0.7; // Normalize
}

float fbmPseudo3D(float3 p, int octaves)
{
    float result = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;

    for (int i = 0; i < octaves; ++i)
    {
        result += amplitude * Pseudo3dNoise(p * frequency);
        frequency *= 2.0;
        amplitude *= 0.5;
    }

    return result;
}



float3x3 computeCameraMatrix(float3 lookAtPos, float3 eye, float3x3 mat)
{
    float3 f = normalize(lookAtPos - eye); // Forward direction
    float3 r = normalize(cross(f, mul(float3(0, 1, 0), mat))); // Right direction
    float3 u = cross(r, f); // Recomputed up
    return float3x3(r, u, -f); // Column-major: [right, up, -forward]
}

float3x3 computeRotationMatrix(float3 axis, float angle)
{
    float c = cos(angle);
    float s = sin(angle);
    float minusC = 1 - c;
    
    return float3x3(c + axis.x * axis.x * minusC, axis.x * axis.y * minusC - axis.z * s, axis.x * axis.z * minusC + axis.y * s,
    axis.y * axis.x * minusC + axis.z * s, c + axis.y * axis.y * minusC, axis.y * axis.z * minusC - axis.x * s,
    axis.z * axis.x * minusC - axis.y * s, axis.z * axis.y * minusC + axis.x * s, c + axis.z * axis.z * minusC);
}

// new function for Desert sdf
// Desert
float surfFunc(in float3 p)
{
    float layer1Amp = 2.0;
    float later2Amp = 1.0;
    float layer3Amp = 1.0;

    float layer1Freq = 0.2;
    float later2Freq = 0.275;
    float layer3Freq = 0.5 * 3.0;

    p /= 2.5;
    float layer1 = n2D(p.xz * layer1Freq) * layer1Amp - .5;
    layer1 = smoothstep(0., 1.05, layer1);
    float layer2 = n2D(p.xz * later2Freq) * later2Amp;
    layer2 = 1. - abs(layer2 - .5) * 2.;
    layer2 = smoothstep(.2, 1., layer2 * layer2);
    float layer3 = n2D(p.xz * layer3Freq) * layer3Amp;
    float res = layer1 * .7 + layer2 * .25 + layer3 * .05;
    return res;
}

float mapDesert(float3 p)
{
    float sf = surfFunc(p);
    return p.y + (.5 - sf) * 2.;
}

float2x2 rot2(in float a)
{
    float c = cos(a), s = sin(a);
    return float2x2(c, s, -s, c);
}

float grad(float x, float offs)
{
    x = abs(frac(x / 6.283 + offs - .25) - .5) * 2.;
    float x2 = clamp(x * x * (-1. + 2. * x), 0., 1.);
    x = smoothstep(0., 1., x);
    return lerp(x, x2, .15);
}

float sandL(float2 p)
{
    float2 q = mul(rot2(3.14159 / 18.), p);
    q.y += (gradN2D(q * 18.) - .5) * .05;
    float grad1 = grad(q.y * 80., 0.);

    q = mul(rot2(-3.14159 / 20.), p);
    q.y += (gradN2D(q * 12.) - .5) * .05;
    float grad2 = grad(q.y * 80., .5);

    q = mul(rot2(3.14159 / 4.), p);
    float a2 = dot(sin(q * 12. - cos(q.yx * 12.)), float2(.25, .25)) + .5;
    float a1 = 1. - a2;
    float c = 1. - (1. - grad1 * a1) * (1. - grad2 * a2);
    return c;
}

float sand(float2 p)
{
    p = float2(p.y - p.x, p.x + p.y) * .7071 / 4.;
    float c1 = sandL(p);
    float2 q = mul(rot2(3.14159 / 12.), p);
    float c2 = sandL(q * 1.25);
    return lerp(c1, c2, smoothstep(.1, .9, gradN2D(p * float2(4, 4))));
}

float bumpSurf3D(in float3 p)
{
    float n = surfFunc(p);
    float3 px = p + float3(.001, 0, 0);
    float nx = surfFunc(px);
    float3 pz = p + float3(0, 0, .001);
    float nz = surfFunc(pz);
    return sand(p.xz + float2(n - nx, n - nz) / .001 * 1.);
}

float3 doBumpMap(in float3 p, in float3 nor, float bumpfactor)
{
    const float2 e = float2(0.001, 0);
    float ref = bumpSurf3D(p);
    float3 grad = (float3(bumpSurf3D(p - e.xyy),
                      bumpSurf3D(p - e.yxy),
                      bumpSurf3D(p - e.yyx)) - ref) / e.x;
    grad -= nor * dot(nor, grad);
    return normalize(nor + grad * bumpfactor);
}

void getDesertColor(float3 p, out float3 color)
{
    float ripple = sand(p.xz);
    color = lerp(float3(1.0, .95, .7), // light sand
                float3(.9, .6, .4), // darker trough
                ripple);
}

#endif