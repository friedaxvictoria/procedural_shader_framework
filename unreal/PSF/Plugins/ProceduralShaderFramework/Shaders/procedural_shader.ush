#ifndef PROCEDURAL_SHADER_FRAMEWORK_H
#define PROCEDURAL_SHADER_FRAMEWORK_H

struct SDF
{
    int type;
    float3 position;
    float3 size;
    float radius;
};

struct MaterialParams
{
    float3 baseColor;
    float3 specularColor;
    float specularStrength;
    float shininess;

    float roughness;
    float metallic;
    float rimPower;
    float fakeSpecularPower;
    float3 fakeSpecularColor;

    float ior;
    float refractionStrength;
    float3 refractionTint;
};

#define MAX_SDFS 16

static int gHitId = -1;
static SDF sdfArray[MAX_SDFS];
static MaterialParams materialParamArray[MAX_SDFS];

static float3 _rayOrigin = float3(0, 0, 7); // Ray origin

int _NoiseType = 0;

void computeUV(float2 fragCoord, float2 ScreenParams, out float2 uv)
{
    uv = (fragCoord.xy * 2.0 - 1.0) / float2(ScreenParams.y / ScreenParams.x, 1.);
}

void addSDF(inout int index, SDF newSDF)
{
    sdfArray[index] = newSDF;
    index += 1;
}

void addSphere(inout int index, float3 position, float radius)
{
    SDF newSDF;
    
    newSDF.type = 0;
    newSDF.position = position;
    newSDF.size = float3(0, 0, 0);
    newSDF.radius = radius;
    
    addSDF(index, newSDF);

}

void addRoundBox(inout int index, float3 position, float radius)
{
    SDF newSDF;
    
    newSDF.type = 0;
    newSDF.position = position;
    newSDF.size = float3(0, 0, 0);
    newSDF.radius = radius;
    
    addSDF(index, newSDF);

}

void addTorus(inout int index, float3 position, float radius, float thickness)
{
    SDF newSDF;
    newSDF.type = 2;
    newSDF.position = position;
    newSDF.radius = 0;
    newSDF.size = float3(0, radius, thickness);
    
    addSDF(index, newSDF);
}

void addHexPrism(inout int index, float3 position, float height)
{
    SDF newSDF;
    newSDF.type = 3;
    newSDF.position = position;
    newSDF.radius = height;
    newSDF.size = float3(0.0, 0.0, 0.0);
    
    addSDF(index, newSDF);
}

void addOctahedron(inout int index, float3 position, float size)
{
    SDF newSDF;
    newSDF.type = 4;
    newSDF.position = position;
    newSDF.radius = size;
    newSDF.size = float3(0.0, 0.0, 0.0);
    
    addSDF(index, newSDF);
}

void addEllipsoid(inout int index, float3 position, float3 radius)
{
    SDF newSDF;
    newSDF.type = 5;
    newSDF.position = position;
    newSDF.radius = 0.0;
    newSDF.size = radius;
    
    addSDF(index, newSDF);
}

void addMaterial(inout int index, MaterialParams material) {
    materialParamArray[index] = material;
    index += 1;
}

float sdSphere(float3 position, float radius)
{
    return length(position) - radius;
}

float sdRoundBox(float3 p, float3 b, float r)
{
    float3 q = abs(p) - b + r;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

float sdTorus(float3 p, float2 radius)
{
    float2 q = float2(length(p.xy) - radius.x, p.z);
    return length(q) - radius.y;
}

float sdHexPrism(float3 p, float2 height)
{
    const float3 k = float3(-0.8660254, 0.5, 0.57735);
    p = abs(p);
    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.0) * k.xy;
    float2 d = float2(
       length(p.xy - float2(clamp(p.x, -k.z * height.x, k.z * height.x), height.x)) * sign(p.y - height.x),
       p.z - height.y);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float sdOctahedron(float3 p, float s)
{
    p = abs(p);
    return (p.x + p.y + p.z - s) * 0.57735027;
}

float sdEllipsoid(float3 p, float3 r)
{
    float k0 = length(p / r);
    float k1 = length(p / (r * r));
    return k0 * (k0 - 1.0) / k1;
}

float evalSDF(int index, float3 p)
{
    SDF s = sdfArray[index];
    if (s.type == 0)
    {
        return sdSphere((p - s.position), s.radius);
    }
    else if (s.type == 1)
    {
        return sdRoundBox(p - s.position, s.size, s.radius);
    }
    else if (s.type == 2)
    {
        return sdTorus(p - s.position, s.size.yz);
    }
    else if (s.type == 3)
    {
        return sdHexPrism(p - s.position, s.radius);
    }
    else if (s.type == 4)
    {
        return sdOctahedron(p - s.position, s.radius);
    }
    else if (s.type == 5)
    {
        return sdEllipsoid(p - s.position, s.size);
    }

    return 1e5;
}

float evaluateScene(float3 p)
{
    float d = 1e5;
    int bestID;
    for (int i = 0; i < MAX_SDFS; i++)
    {
        float di = evalSDF(i, p);
        if (di < d)
        {
            d = di;
            bestID = i;
        }
        gHitId = bestID;
    }
    return d;
}

float2 GetGradient(float2 intPos, float t)
{
    float rand = frac(sin(dot(intPos, float2(12.9898, 78.233))) * 43758.5453);
    float angle = 6.283185 * rand + 4.0 * t * rand;
    return float2(cos(angle), sin(angle));
}

float Pseudo3dNoise(float3 pos)
{
    float2 i = floor(pos.xy);
    float2 f = frac(pos.xy);
    float2 blend = f * f * (3.0 - 2.0 * f);

    float a = dot(GetGradient(i + float2(0, 0), pos.z), f - float2(0.0, 0.0));
    float b = dot(GetGradient(i + float2(1, 0), pos.z), f - float2(1.0, 0.0));
    float c = dot(GetGradient(i + float2(0, 1), pos.z), f - float2(0.0, 1.0));
    float d = dot(GetGradient(i + float2(1, 1), pos.z), f - float2(1.0, 1.0));

    float xMix = lerp(a, b, blend.x);
    float yMix = lerp(c, d, blend.x);
    return lerp(xMix, yMix, blend.y) / 0.7; // Normalize
}

float fbmPseudo3D(float3 p, int octaves)
{
    float result = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;

    for (int i = 0; i < octaves; ++i)
    {
        result += amplitude * Pseudo3dNoise(p * frequency);
        frequency *= 2.0;
        amplitude *= 0.5;
    }

    return result;
}

float3 getNormal(int index, float3 p)
{
    float h = 0.0001;
    float2 k = float2(1, -1);
    
    float normal1 = evalSDF(index, p + k.xyy * h);
    float normal2 = evalSDF(index, p + k.yyx * h);
    float normal3 = evalSDF(index, p + k.yxy * h);
    float normal4 = evalSDF(index, p + k.xxx * h);
    return normalize(k.xyy * normal1 + k.yyx * normal2 + k.yxy * normal3 + k.xxx * normal4);
}


float get_noise(float3 p)
{
    if (_NoiseType == 1)
    {
        return fbmPseudo3D(p, 1);
    }
    return 0;
}




float2 getGradient(float2 intPosition, float t)
{
    float rand = frac(sin(dot(intPosition, float2(12.9898, 78.233))) * 43758.5453);
    float angle = 6.283185 * rand + 4.0 * t * rand;
    return float2(cos(angle), sin(angle));
}

float4 hash44(float4 p)
{
    p = frac(p * float4(0.1031, 0.1030, 0.0973, 0.1099));
    p += dot(p, p.wzxy + 33.33);
    return frac((p.xxyz + p.yzzw) * p.zywx);
}

float n31(float3 p)
{
    const float3 S = float3(7.0, 157.0, 113.0); // step vector: pairwise-prime
    float3 ip = floor(p);
    p = frac(p);
    p = p * p * (3.0 - 2.0 * p); // Hermite smoother

    float4 h = float4(0.0, S.yz, S.y + S.z) + dot(ip, S);
    h = lerp(hash44(h), hash44(h + S.x), p.x);
    h.xy = lerp(h.xz, h.yw, p.y);
    return lerp(h.x, h.y, p.z);
}

float fbm_n31(float3 p, int octaves)
{
    float value = 0.0;
    float amplitude = 0.5;
    for (int i = 0; i < octaves; ++i)
    {
        value += amplitude * n31(p);
        p *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}



MaterialParams createDefaultMaterialParams()
{
    MaterialParams mat;
    mat.baseColor = float3(1.0, 1.0, 1.0);
    mat.specularColor = float3(1.0, 1.0, 1.0);
    mat.specularStrength = 1.0;
    mat.shininess = 32.0;

    mat.roughness = 0.5;
    mat.metallic = 0.0;
    mat.rimPower = 2.0;
    mat.fakeSpecularPower = 32.0;
    mat.fakeSpecularColor = float3(1.0, 1.0, 1.0);

    mat.ior = 1.45;
    mat.refractionStrength = 0.0;
    mat.refractionTint = float3(1.0, 1.0, 1.0);
    return mat;
}

MaterialParams makePlastic(float3 color)
{
    MaterialParams mat = createDefaultMaterialParams();
    mat.baseColor = color;
    mat.metallic = 0.0;
    mat.roughness = 0.4;
    mat.specularStrength = 0.5;
    return mat;
}

struct LightingContext
{
    float3 position; // World-space fragment position
    float3 normal; // Normal at the surface point (normalized)
    float3 viewDir; // Direction from surface to camera (normalized)
    float3 lightDir; // Direction from surface to light (normalized)
    float3 lightColor; // RGB intensity of the light source
    float3 ambient; // Ambient light contribution
};

void lightingContext(float3 hitPos, float3 rayOrigin, out float3 viewDir, out float3 lightDir, out float3 lightColor, out float3 ambientColor)
{
    viewDir = normalize(rayOrigin - hitPos); // Direction from hit point to camera
    float3 baseLightDir = float3(10.0, 5.0, 5.0); // Light position in world space
    lightDir = normalize(baseLightDir - hitPos);
    lightColor = float3(1.0, 1.0, 1.0); // Light color (white)
    ambientColor = float3(0.1, 0.1, 0.1); // Ambient light color<
}

void applyPhongLighting(float3 hitPos, float hitIndex, float3 normal, out float3 lightingColor)
{
    float3 viewDir, lightDir, lightColor, ambientColor;
    lightingContext(hitPos, _rayOrigin, viewDir, lightDir, lightColor, ambientColor);
    float diff = max(dot(normal, lightDir), 0.0); // Lambertian diffuse

    float3 R = reflect(-lightDir, normal); // Reflected light direction
    float spec = pow(max(dot(R, viewDir), 0.0), materialParamArray[hitIndex].shininess); // Phong specular

    float3 diffuse = diff * materialParamArray[hitIndex].baseColor * lightColor;
    float3 specular = spec * materialParamArray[hitIndex].specularColor * materialParamArray[hitIndex].specularStrength;

    lightingColor =  ambientColor + diffuse + specular;
}

void raymarch(float2 uv, int numSDF, out float t, out float3 hitPos, out int gHitID, out float3 normal)
{
    float3 rayDirection = normalize(float3(uv, -1)); // Ray direction
    t = 0.0;
    bool hit = false;
    for (int i = 0; i < 100; i++)
    {
        float3 p = _rayOrigin + rayDirection * t; // Current point in the ray
        gHitID = -1;
        float d = 1e5;
        int bestID = -1;
        for (int i = 0; i < numSDF; ++i)
        {
            float di = evalSDF(i, p);
            if (di < d)
            {
                d = di; // Update the closest distance
                bestID = i; // Update the closest hit ID
            }
        }
        gHitID = bestID; // Store the ID of the closest hit shape
        if (d < 0.001)
        {
            hitPos = p;
            hit = true;
            normal = getNormal(gHitID, p);
            break;
        }
        if (t > 100.0)
            break;
        t += d;
    }
    if (!hit)
    {
        t = -1;
    }
}

float3 renderScene(float3 color, float t)
{
    if (t > 0.0)
        return color;
    return float3(0.0, 0.0, 0.0);
}

#endif