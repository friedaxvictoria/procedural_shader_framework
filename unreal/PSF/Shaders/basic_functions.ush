#ifndef PROCEDURAL_SHADER_FRAMEWORK_BASICS_H
#define PROCEDURAL_SHADER_FRAMEWORK_BASICS_H

#include "global_variables.ush"

void computeUV(float2 fragCoord, out float2 uv)
{
    uv = (fragCoord.xy * 2.0 - 1.0) / float2(screenSize.y / screenSize.x, 1.);
}

// after lighting function
void combinedColor(float4 hitPosition0, float3 color0, float4 hitPosition1, float3 color1, out float3 color)
{
    if (hitPosition0.w > _raymarchStoppingCriterium && hitPosition1.w > _raymarchStoppingCriterium)
    {
        color = float3(0, 0, 0);
    }
    else if (hitPosition0.w < hitPosition1.w)
    {
        color = color0;
    }
    else
    {
        color = color1;
    }
}


// before lighting function
void getMinimum(float4 hitPosition0, float4 hitPosition1, float3 normal1, float3 normal2, float hitIndex1, float hitIndex2, out float4 hitPos, out float3 normal, out float hitIndex)
{
    if (hitPosition0.w < hitPosition1.w && hitPosition0.w < _raymarchStoppingCriterium)
    {
        hitPos = hitPosition0;
        normal = normal1;
        hitIndex = hitIndex1;
    }
    else
    {
        hitPos = hitPosition1;
        normal = normal2;
        hitIndex = hitIndex2;
    }
}

#endif